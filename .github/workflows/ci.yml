name: 🚀 TraceChain CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*', 'hotfix/*', 'release/*', 'smart-contracts/*', 'infrastructure/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.19'

jobs:
  # Smart Contracts Testing & Compilation
  smart-contracts:
    name: 🔗 Smart Contracts
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'smart-contracts') || contains(github.ref, 'smart-contracts') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: smart-contracts/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./smart-contracts
        run: npm ci

      - name: 🔍 Lint contracts
        working-directory: ./smart-contracts
        run: npm run lint || true

      - name: 🧪 Run smart contract tests
        working-directory: ./smart-contracts
        run: npm test

      - name: 🔒 Security audit
        working-directory: ./smart-contracts
        run: npm audit --audit-level moderate || true

      - name: 📊 Generate coverage report
        working-directory: ./smart-contracts
        run: npm run coverage || true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./smart-contracts/coverage
          flags: smart-contracts
          name: smart-contracts-coverage

  # Backend Testing & Linting
  backend:
    name: ⚙️ Backend API
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'backend') || contains(github.ref, 'backend') || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tracechain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🔍 Lint backend code
        working-directory: ./backend
        run: npm run lint || true

      - name: 🏗️ Build backend
        working-directory: ./backend
        run: npm run build

      - name: 🧪 Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tracechain_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key
          NODE_ENV: test
        run: npm test

      - name: 🔒 Security audit
        working-directory: ./backend
        run: npm audit --audit-level moderate || true

      - name: 📊 Generate coverage report
        working-directory: ./backend
        run: npm run coverage || true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage

  # Frontend Testing & Building
  frontend:
    name: 🖥️ Frontend
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'frontend') || contains(github.ref, 'frontend') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Lint frontend code
        working-directory: ./frontend
        run: npm run lint || true

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🧪 Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: 🔒 Security audit
        working-directory: ./frontend
        run: npm audit --audit-level moderate || true

      - name: 📊 Generate coverage report
        working-directory: ./frontend
        run: npm run coverage || true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Infrastructure & Docker
  infrastructure:
    name: 🐳 Infrastructure
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'infrastructure') || contains(github.ref, 'infrastructure') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend Docker image
        run: |
          docker build -t tracechain-backend:test ./backend

      - name: 🏗️ Build frontend Docker image
        run: |
          docker build -t tracechain-frontend:test ./frontend

      - name: 🏗️ Build smart contracts Docker image
        run: |
          docker build -t tracechain-smart-contracts:test ./smart-contracts

      - name: 🧪 Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Code Quality & Coverage
  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Deployment (only for main and develop branches)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [smart-contracts, backend, frontend, infrastructure]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could include:
          # - Building Docker images
          # - Pushing to container registry
          # - Deploying to staging servers
          # - Running database migrations

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [smart-contracts, backend, frontend, infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here
          # This could include:
          # - Building and pushing Docker images
          # - Deploying to production servers
          # - Running database migrations
          # - Updating DNS/CDN
          # - Sending deployment notifications

  # Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [smart-contracts, backend, frontend, infrastructure, security, quality]
    if: always()
    
    steps:
      - name: 📢 Notify on success
        if: ${{ needs.smart-contracts.result == 'success' && needs.backend.result == 'success' && needs.frontend.result == 'success' }}
        run: |
          echo "✅ All CI checks passed!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: 📢 Notify on failure
        if: ${{ needs.smart-contracts.result == 'failure' || needs.backend.result == 'failure' || needs.frontend.result == 'failure' }}
        run: |
          echo "❌ CI checks failed!"
          # Add failure notification logic here
