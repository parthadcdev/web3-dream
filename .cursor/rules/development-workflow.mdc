---
alwaysApply: true
description: Development workflow and project structure
---

# Development Workflow for TraceChain

## Getting Started
1. **Start MCP Server**: `./run-mcp-unified.sh start`
2. **Build Backend**: `cd backend && npm run build`
3. **Start Backend**: `cd backend && npm start`
4. **Build Frontend**: `cd frontend && npm run build`
5. **Serve Frontend**: `cd frontend/build && python3 -m http.server 3001`
6. **Run Tests**: `make test` or individual component tests

## Port Configuration
- **Backend**: Port 3000 (Node.js + Express)
- **Frontend**: Port 3001 (React build served via Python HTTP server)
- **Smart Contracts**: Port 8545 (Hardhat local node)
- **Database**: Neon PostgreSQL (external, serverless)

## Database Configuration
- **Database**: Neon PostgreSQL (serverless)
- **ORM**: Prisma
- **Connection**: SSL required, external connection string
- **Setup**: Use `scripts/setup-neon.sh` for initial setup
- **Migrations**: `npx prisma migrate dev`
- **Studio**: `npx prisma studio`

## Authentication Providers
- **Traditional Auth**: Email/password with bcrypt hashing
- **Stytch Integration**: Magic links and OTP authentication
- **Web3 Auth**: MetaMask wallet authentication
- **JWT Tokens**: Secure session management

## Daily Development Workflow
1. **Check Project Health**: Use MCP `check_project_health` tool
2. **Create Feature Branch**: Use `git_create_branch` with Linear issue
3. **Develop Features**: Use MCP tools for Git operations
4. **Run Pre-commit Checks**: Use `git_pre_commit_review`
5. **Commit Changes**: Use `git_commit_smart` with Linear integration
6. **Create Pull Request**: Link to Linear issue
7. **Deploy to Staging**: Use `deploy_application` tool

## Code Quality Standards
- **TypeScript**: Use strict mode, proper typing
- **ESLint**: Follow project linting rules
- **Prettier**: Consistent code formatting
- **Tests**: Maintain test coverage
- **Documentation**: Update docs with changes

## MCP Tool Usage
- **Git Operations**: Always use MCP Git tools
- **Project Management**: Use MCP project tools
- **Linear Integration**: Use MCP Linear tools
- **Security**: Use MCP security tools
- **Deployment**: Use MCP deployment tools

## File Organization
- **Frontend**: [frontend/src/](mdc:frontend/src/) - React components and pages
- **Backend**: [backend/src/](mdc:backend/src/) - Express API and routes
- **Smart Contracts**: [smart-contracts/contracts/](mdc:smart-contracts/contracts/) - Solidity contracts
- **Scripts**: [scripts/](mdc:scripts/) - Build and deployment scripts
- **Documentation**: Root level `.md` files

## Environment Management
- **Development**: Local development with hot reload
- **Staging**: Testing environment with production-like setup
- **Production**: Live environment with monitoring

## Monitoring and Debugging
- **Health Checks**: Use `/api/health` endpoint
- **Logs**: Check application logs in [logs/](mdc:logs/) directory
- **Metrics**: Use Prometheus and Grafana for monitoring
- **MCP Status**: Use `./run-mcp-unified.sh status`

## Common Issues and Solutions

### Port Conflicts
- **EADDRINUSE Error**: Port 3000 already in use
  - Solution: Kill existing processes: `lsof -ti:3000 | xargs kill -9`
  - Check running processes: `ps aux | grep -E "(npm|node)" | grep -v grep`

### TypeScript Compilation Issues
- **TS7030 Error**: Not all code paths return a value
  - Ensure all async functions have explicit return statements
  - Use `return res.status().json()` instead of just `res.status().json()`

### Development vs Production Builds
- **Backend**: Use `npm run build` then `npm start` for production mode
- **Frontend**: Use `npm run build` then serve with Python HTTP server
- **Development Mode**: `npm run dev` (if available, but may have compilation issues)