version: '3.8'

# Podman Compose for connecting to external services
# Use this when you want to connect to existing PostgreSQL/Redis instances
# Usage: podman-compose -f docker-compose.external.yml up -d

services:
  # Backend API - connects to external services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tracechain-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      # Connect to external services
      DATABASE_URL: postgresql://tracechain_user:tracechain_password@host.docker.internal:5432/tracechain_db
      REDIS_URL: redis://host.docker.internal:6379
      JWT_SECRET: your_jwt_secret_here
      JWT_EXPIRES_IN: 24h
      POLYGON_RPC_URL: https://polygon-rpc.com
      MUMBAI_RPC_URL: https://rpc-mumbai.maticvigil.com
      # External service flags
      EXTERNAL_POSTGRES: true
      EXTERNAL_REDIS: true
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - tracechain-network
    command: npm run dev
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tracechain-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_BLOCKCHAIN_NETWORK: mumbai
      REACT_APP_PRODUCT_REGISTRY_ADDRESS: 0x1234567890123456789012345678901234567890
      REACT_APP_NFT_CERTIFICATE_ADDRESS: 0x1234567890123456789012345678901234567890
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - tracechain-network
    command: npm start

  # Hardhat Local Network
  hardhat:
    build:
      context: ./smart-contracts
      dockerfile: Dockerfile
    container_name: tracechain-hardhat
    environment:
      HARDHAT_NETWORK: localhost
    ports:
      - "8545:8545"
    volumes:
      - ./smart-contracts:/app
      - /app/node_modules
    networks:
      - tracechain-network
    command: npx hardhat node

  # MQTT Broker for IoT
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: tracechain-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./infrastructure/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - tracechain-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tracechain-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tracechain-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: tracechain-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tracechain-network

volumes:
  mosquitto_data:
  mosquitto_logs:
  prometheus_data:
  grafana_data:

networks:
  tracechain-network:
    driver: bridge
